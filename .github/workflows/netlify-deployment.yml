name: Netlify Deployment & Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - production

env:
  NODE_VERSION: '18'
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

jobs:
  # Pre-deployment checks
  pre-deployment:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Determine deployment environment
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "environment=preview" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "environment=preview" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "environment=none" >> $GITHUB_OUTPUT
        fi

  # Build and test
  build-and-test:
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run type-check
    
    - name: Lint code
      run: npm run lint
    
    - name: Check formatting
      run: npm run format:check
    
    - name: Run comprehensive tests
      run: npm run test:comprehensive
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
    
    - name: Build application
      run: |
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
          npm run build
        else
          npm run build:dev
        fi
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}
        VITE_CLAUDE_API_KEY: ${{ secrets.VITE_CLAUDE_API_KEY }}
        NODE_ENV: ${{ needs.pre-deployment.outputs.environment == 'production' && 'production' || 'development' }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Deploy to Netlify
  deploy:
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-test]
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    environment: ${{ needs.pre-deployment.outputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
    
    - name: Install Netlify CLI
      run: npm install -g netlify-cli
    
    - name: Deploy to Netlify
      id: deploy
      run: |
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
          netlify deploy --prod --dir=dist --message="Production deployment from GitHub Actions"
        else
          netlify deploy --dir=dist --message="Preview deployment from GitHub Actions"
        fi
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    
    - name: Get deployment URL
      id: url
      run: |
        if [[ "${{ needs.pre-deployment.outputs.environment }}" == "production" ]]; then
          echo "url=https://${{ secrets.NETLIFY_SITE_NAME }}.netlify.app" >> $GITHUB_OUTPUT
        else
          # Extract deploy URL from Netlify CLI output
          DEPLOY_URL=$(netlify status --json | jq -r '.site.url')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        fi
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    
    - name: Comment deployment URL on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Deployment Preview Ready!**
            
            **Environment:** ${{ needs.pre-deployment.outputs.environment }}
            **URL:** ${{ steps.url.outputs.url }}
            **Commit:** ${context.sha.substring(0, 7)}
            
            The deployment will be available shortly. Please allow a few minutes for the build to complete.`
          })

  # Post-deployment monitoring and health checks
  post-deployment:
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy]
    if: needs.pre-deployment.outputs.should-deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Wait for deployment to be ready
      run: sleep 60
    
    - name: Health check
      run: |
        DEPLOY_URL="${{ needs.deploy.outputs.url || format('https://{0}.netlify.app', secrets.NETLIFY_SITE_NAME) }}"
        echo "Checking health of: $DEPLOY_URL"
        
        # Basic connectivity check
        curl -f -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" || exit 1
        
        # Check if app loads properly
        curl -f -s "$DEPLOY_URL" | grep -q "Enhanced RAG" || exit 1
        
        echo "‚úÖ Health check passed"
    
    - name: Performance audit with Lighthouse
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ needs.deploy.outputs.url || format('https://{0}.netlify.app', secrets.NETLIFY_SITE_NAME) }}
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Supabase Edge Functions deployment
  deploy-edge-functions:
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-test]
    if: needs.pre-deployment.outputs.should-deploy == 'true' && needs.pre-deployment.outputs.environment == 'production'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
    
    - name: Deploy Edge Functions
      run: |
        supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

  # Monitoring and alerting setup
  setup-monitoring:
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy]
    if: needs.pre-deployment.outputs.should-deploy == 'true' && needs.pre-deployment.outputs.environment == 'production'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup monitoring alerts
      run: |
        echo "Setting up monitoring for production deployment"
        # This would integrate with your monitoring service
        # For example: Sentry, DataDog, New Relic, etc.
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "URL: https://${{ secrets.NETLIFY_SITE_NAME }}.netlify.app"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the logs and take appropriate action."